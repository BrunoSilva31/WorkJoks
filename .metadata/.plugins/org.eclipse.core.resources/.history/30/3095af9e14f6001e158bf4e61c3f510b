package com.example.freela.demo.services;

import java.time.DayOfWeek;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.freela.demo.entities.User;
import com.example.freela.demo.repositories.UserRepository;

import jakarta.persistence.EntityNotFoundException;

@Service
public class UserService {
	
	@Autowired
	private UserRepository repository;
	
	private static final int CAPACIDADE_MEZANINO = 40;
	private static final int CAPACIDADE_VARANDA = 35;
	
	public User insert(User obj) {
		
		String dataString = obj.getFormattedDate();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        
        try {
            LocalDateTime data = LocalDateTime.parse(dataString, formatter);
            return "Data formatada: " + data;
        } catch (Exception e) {
            return "Erro ao converter a data: " + e.getMessage();
        }
		
		validarHorario(obj.getFormattedDate());
		
		validarCapacidade(obj.getFormattedDate(), obj.getAmbiente());
		
		return repository.save(obj);
	}
	
	
	public void delete(Long id) {
		repository.deleteById(id);
	}
	
	
	public User update(Long id, User obj) {
		
		User existingUser = repository.findById(id).orElseThrow(() -> new EntityNotFoundException("Usuário não encontrado com ID: " + id));
		
		validarHorario(obj.getFormattedDate());
		
		validarCapacidade(obj.getFormattedDate(), obj.getAmbiente());
		
		BeanUtils.copyProperties(obj, existingUser, "id");
		
		return repository.save(existingUser);
	}
	
	
	private void updateData(User entity, User obj) {
		entity.setName(obj.getName());
		entity.setEmail(obj.getEmail());
		entity.setPhone(obj.getPhone());
		entity.setFormattedDate(obj.getFormattedDate());
		entity.setAmbiente(obj.getAmbiente());

	}
	
	private void validarHorario(String date) {
		LocalDateTime horario = LocalDateTime.parse(date);
		
		DayOfWeek diaSemana = horario.getDayOfWeek();
		int hora = horario.getHour();
		
		List<DayOfWeek> diasDisponiveis = Arrays.asList(DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY);
		
		if(!diasDisponiveis.contains(diaSemana)) {
			throw new IllegalArgumentException("Dia não disponível.");
		}
		
		if((diaSemana == DayOfWeek.FRIDAY && hora >= 0) || (diaSemana == DayOfWeek.SATURDAY && hora >=0) || (diaSemana == DayOfWeek.SUNDAY && hora >=0)) {
			throw new IllegalArgumentException ("Horário não disponível.");
		}
		
		if(horario.isBefore(LocalDateTime.now())) {
			throw new IllegalArgumentException("A data de agendamento passou.");
		}
	}
	
	
	private void validarCapacidade(String horarioAgendamento, String ambiente) {
	    LocalDateTime horario = LocalDateTime.parse(horarioAgendamento);
	    int hora = horario.getHour();
	    long totalClientesAmbiente;
	    
	    if ("mezanino".equalsIgnoreCase(ambiente)) {
	        if ((hora >= 19 && hora <= 23) || (hora == 0 && hora <= 1)) {
	            if (hora == 0) {
	                horario = horario.plusDays(1);
	            }
	            totalClientesAmbiente = repository.countByDateAndAmbiente(horario, "mezanino");
	            if (totalClientesAmbiente >= CAPACIDADE_MEZANINO) {
	                throw new IllegalArgumentException("Capacidade do mezanino excedida para esse horário.");
	            } else {
	                throw new IllegalArgumentException("Horário indisponível para agendamento no mezanino.");
	            }
	        } else if ("varanda".equalsIgnoreCase(ambiente)) {
	            if ((hora >= 15 && hora <= 18) || (hora >= 19 && hora <= 23)) {
	                totalClientesAmbiente = repository.countByDateAndAmbiente(horario, "varanda");
	                if (totalClientesAmbiente >= CAPACIDADE_VARANDA) {
	                    throw new IllegalArgumentException("Capacidade da varanda excedida para esse horário");
	                } else {
	                    throw new IllegalArgumentException("Horário indisponível para agendamento na varanda.");
	                }
	            } else {
	                throw new IllegalArgumentException("Ambiente inválido.");
	            }
	        }
	    }
	}


	public List<User> findAll(){
		return repository.findAll();
	}
	
	public User findById(Long id) {
		Optional<User> obj = repository.findById(id);
		return obj.get();
	}
}
